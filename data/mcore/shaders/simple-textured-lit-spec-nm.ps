

/* medea - an Open Source, WebGL-based 3d engine for next-generation browser games.
 * (or alternatively, for clumsy and mostly useless tech demos written solely for fun)
 *
 * medea is (c) 2011, Alexander C. Gessler
 * licensed under the terms and conditions of a 3 clause BSD license.
 */
 
uniform vec3 LIGHT_D0_DIR;

uniform sampler2D texture;
uniform sampler2D normal_texture;

uniform vec4 spec_color_shininess;


#include <remote:mcore/shaders/core.psh>
#include <remote:mcore/shaders/lighting.psh>

// currently all lighting computation happens in worldspace
void main()
{
	vec3 N = normalize(FetchNormal());
	vec3 T = normalize(FetchTangent());
	vec3 B = normalize(FetchBitangent());
	N = ApplyNormalMap_WS(normal_texture, FetchTexCoord(), N, T, B);

	// diffuse contribution
	float diffuse = ComputeLambertDiffuseCoeff(LIGHT_D0_DIR, N);

	// specular contribution (blinn) 
	vec3 tex = texture2D(texture, FetchTexCoord()).rgb;
	float specular = ComputeBlinnSpecularCoeff(
		FetchVec3(eye),
		N,
		LIGHT_D0_DIR,
		spec_color_shininess.a
	) * length(tex) * 0.2;

	// self-shadowing
	specular *= clamp(diffuse*4.0, 0.0, 1.0);

	// final diffuse term, using the half-lambert term from source 
	//diffuse = (diffuse + 1.0) * 0.5;

    gl_FragColor.a = 1.0;
	gl_FragColor.rgb = tex * diffuse + spec_color_shininess.rgb * specular;
}

